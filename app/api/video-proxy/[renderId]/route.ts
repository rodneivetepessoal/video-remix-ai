import { NextRequest, NextResponse } from "next/server";
import VideoProxyService from "@/lib/video-proxy-service";

// Defini√ß√£o de tipo para o contexto da rota, para maior clareza e seguran√ßa.
interface RouteContext {
  params: {
    renderId: string;
  };
}

// Handler para requisi√ß√µes GET
export async function GET(request: NextRequest, { params }: RouteContext) {
  // CORRE√á√ÉO: Instanciamos o servi√ßo DENTRO da fun√ß√£o.
  // Isso garante que ele s√≥ seja criado em tempo de execu√ß√£o, quando as
  // vari√°veis de ambiente (como as chaves de API) j√° est√£o dispon√≠veis.
  const videoProxyService = new VideoProxyService();
  const { renderId } = params;

  try {
    console.log(`üé• Solicita√ß√£o de proxy para render: ${renderId}`);
    const result = await videoProxyService.getValidVideoUrl(renderId);

    if (!result.success || !result.url) {
      console.error(
        `‚ùå Falha ao obter URL v√°lida para ${renderId}: ${result.error}`
      );
      return NextResponse.json(
        { error: "V√≠deo n√£o dispon√≠vel", details: result.error },
        { status: 404 }
      );
    }

    console.log(`‚úÖ Redirecionando para URL v√°lida: ${result.url}`);
    // Redireciona o cliente diretamente para a URL do v√≠deo no S3.
    // Isso √© mais eficiente do que fazer o proxy do stream de v√≠deo pelo nosso servidor.
    return NextResponse.redirect(result.url);
  } catch (error) {
    console.error(
      `‚ùå Erro cr√≠tico no endpoint de proxy:`,
      (error as Error).message
    );
    return NextResponse.json(
      { error: "Erro interno do servidor" },
      { status: 500 }
    );
  }
}

// Handler para requisi√ß√µes HEAD (usado por alguns players para obter metadados)
export async function HEAD(request: NextRequest, { params }: RouteContext) {
  // CORRE√á√ÉO: Instanciamos o servi√ßo DENTRO da fun√ß√£o tamb√©m.
  const videoProxyService = new VideoProxyService();
  const { renderId } = params;

  try {
    const result = await videoProxyService.getValidVideoUrl(renderId);

    if (!result.success || !result.url) {
      return new NextResponse(null, { status: 404 });
    }

    // Para HEAD, tamb√©m redirecionamos, o navegador cuidar√° de seguir o redirecionamento.
    return NextResponse.redirect(result.url, { status: 302 });
  } catch (error) {
    console.error(`‚ùå Erro na requisi√ß√£o HEAD:`, (error as Error).message);
    return new NextResponse(null, { status: 500 });
  }
}
